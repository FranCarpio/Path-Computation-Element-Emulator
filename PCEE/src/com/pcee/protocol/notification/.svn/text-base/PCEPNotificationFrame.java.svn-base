package com.pcep.notification;

import java.util.LinkedList;

import com.pcep.message.PCEPMessageFrame;
import com.pcep.message.objectframe.PCEPObjectFrame;
import com.pcep.message.objectframe.impl.PCEPNotificationObject;
import com.pcep.message.objectframe.impl.PCEPRequestParametersObject;

public class PCEPNotificationFrame implements PCEPMessageFrame {
	
	public final int MESSAGE_TYPE = 5;

	LinkedList<PCEPNotificationObject> notificationList;
	LinkedList<PCEPRequestParametersObject> rpList;

	public PCEPNotificationFrame(LinkedList<PCEPNotificationObject> notificationList) {
		this.notificationList = notificationList;
	}

	public void insertRequestParametersObjectList(LinkedList<PCEPRequestParametersObject> rpList) {
		this.rpList = rpList;
	}

	public boolean containsRequestParametersObjectList() {
		if (rpList == null) {
			return false;
		}
		return true;
	}

	public LinkedList<PCEPObjectFrame> getObjectFrameLinkedList() {

		LinkedList<PCEPObjectFrame> requestObjects = new LinkedList<PCEPObjectFrame>();

		if (rpList != null) {
			for (int i = 0; i < rpList.size(); i++) {
				requestObjects.add(rpList.get(i));
			}
		}

		for (int i = 0; i < notificationList.size(); i++) {
			requestObjects.add(notificationList.get(i));
		}

		return requestObjects;
	}

	public int getByteLength() {
		int length = 0;

		if (rpList != null) {
			for (int i = 0; i < rpList.size(); i++) {
				length += rpList.get(0).getObjectFrameByteLength();
			}
		}

		for (int i = 0; i < notificationList.size(); i++) {
			length += notificationList.get(0).getObjectFrameByteLength();
		}

		return length;
	}

	public String getBinaryString() {

		StringBuffer objectsString = new StringBuffer();

		if (rpList != null) {
			for (int i = 0; i < rpList.size(); i++) {
				objectsString.append(rpList.get(0).getObjectFrameBinaryString());
			}
		}

		for (int i = 0; i < notificationList.size(); i++) {
			objectsString.append(notificationList.get(0).getObjectFrameBinaryString());
		}

		return objectsString.toString();
	}
	
	public int getMessageType() {
		return MESSAGE_TYPE;
	}

}
