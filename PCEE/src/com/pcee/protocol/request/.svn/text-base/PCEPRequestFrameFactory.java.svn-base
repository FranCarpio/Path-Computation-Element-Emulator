package com.pcep.request;

import java.util.LinkedList;

import com.pcep.message.PCEPCommonMessageHeader;
import com.pcep.message.PCEPConstantValues;
import com.pcep.message.PCEPMessage;
import com.pcep.message.objectframe.PCEPCommonObjectHeader;
import com.pcep.message.objectframe.PCEPObjectFrame;
import com.pcep.message.objectframe.impl.PCEPBandwidthObject;
import com.pcep.message.objectframe.impl.PCEPEndPointsObject;
import com.pcep.message.objectframe.impl.PCEPIncludeRouteObject;
import com.pcep.message.objectframe.impl.PCEPLabelSwitchedPathAttributesObject;
import com.pcep.message.objectframe.impl.PCEPLoadBalancingObject;
import com.pcep.message.objectframe.impl.PCEPMetricObject;
import com.pcep.message.objectframe.impl.PCEPReportedRouteObject;
import com.pcep.message.objectframe.impl.PCEPRequestParametersObject;
import com.pcep.message.objectframe.impl.PCEPSynchronizationVectorObject;

public class PCEPRequestFrameFactory {

	public static PCEPRequestFrame generatePathComputationRequestFrame(PCEPRequestParametersObject RP, PCEPEndPointsObject endPoints) {

		PCEPRequestFrame requestFrame = new PCEPRequestFrame(RP, endPoints);

		return requestFrame;
	}

	public static PCEPRequestFrame getPathComputationRequestFrame(PCEPMessage message) {

		LinkedList<PCEPSynchronizationVectorObject> SVECList = null;
		PCEPRequestParametersObject RP = null;
		PCEPEndPointsObject endPoints = null;
		PCEPLabelSwitchedPathAttributesObject LSPA = null;
		PCEPBandwidthObject bandwidth = null;
		LinkedList<PCEPMetricObject> metricList = null;
		PCEPReportedRouteObject RRO = null;
		PCEPIncludeRouteObject IRO = null;
		PCEPLoadBalancingObject loadBalancing = null;

		LinkedList<PCEPObjectFrame> objectList = message.getObjectsList();

		for (int i = 0; i < objectList.size(); i++) {

			PCEPObjectFrame objectFrame = objectList.get(i);
			PCEPCommonObjectHeader objectFrameHeader = objectFrame.getObjectHeader();

			switch (objectFrameHeader.getClassDecimalValue()) {

			case 11: {
				PCEPSynchronizationVectorObject SVEC = (PCEPSynchronizationVectorObject) objectFrame;

				if (SVECList != null) {
					SVECList.add(SVEC);
				} else {
					SVECList = new LinkedList<PCEPSynchronizationVectorObject>();
					SVECList.add(SVEC);
				}

				break;
			}

			case 2: {
				RP = (PCEPRequestParametersObject) objectFrame;
				break;
			}
			case 4: {
				endPoints = (PCEPEndPointsObject) objectFrame;
				break;
			}
			case 9: {
				LSPA = (PCEPLabelSwitchedPathAttributesObject) objectFrame;
				break;
			}

			case 5: {
				bandwidth = (PCEPBandwidthObject) objectFrame;
				break;
			}

			case 6: {
				PCEPMetricObject metricObject = (PCEPMetricObject) objectFrame;

				if (metricList != null) {
					metricList.add(metricObject);
				} else {
					metricList = new LinkedList<PCEPMetricObject>();
					metricList.add(metricObject);
				}

				break;
			}

			case 8: {
				RRO = (PCEPReportedRouteObject) objectFrame;
				break;
			}

			case 10: {
				IRO = (PCEPIncludeRouteObject) objectFrame;
				break;
			}

			case 14: {
				loadBalancing = (PCEPLoadBalancingObject) objectFrame;
				break;
			}

			default: {
				break;
			}

			}

		}

		PCEPRequestFrame requestFrame = new PCEPRequestFrame(RP, endPoints);

		if (SVECList != null) {
			requestFrame.insertSynchronizationVectorObjectList(SVECList);
		}
		if (LSPA != null) {
			requestFrame.insertLabelSwitchedPathAttributesObject(LSPA);
		}
		if (bandwidth != null) {
			requestFrame.insertBandwidthObject(bandwidth);
		}
		if (metricList != null) {
			requestFrame.insertMetricObjectList(metricList);
		}
		if (RRO != null) {
			requestFrame.insertReportedRouteObject(RRO);
		}
		if (IRO != null) {
			requestFrame.insertIncludeRouteObject(IRO);
		}
		if (loadBalancing != null) {
			requestFrame.insertLoadBalancingObject(loadBalancing);
		}

		return requestFrame;
	}

}
