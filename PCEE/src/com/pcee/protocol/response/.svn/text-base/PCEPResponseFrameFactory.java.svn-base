package com.pcep.response;

import java.util.LinkedList;

import com.pcep.message.PCEPMessage;
import com.pcep.message.objectframe.PCEPCommonObjectHeader;
import com.pcep.message.objectframe.PCEPObjectFrame;
import com.pcep.message.objectframe.impl.PCEPBandwidthObject;
import com.pcep.message.objectframe.impl.PCEPEndPointsObject;
import com.pcep.message.objectframe.impl.PCEPExplicitRouteObject;
import com.pcep.message.objectframe.impl.PCEPIncludeRouteObject;
import com.pcep.message.objectframe.impl.PCEPLabelSwitchedPathAttributesObject;
import com.pcep.message.objectframe.impl.PCEPLoadBalancingObject;
import com.pcep.message.objectframe.impl.PCEPMetricObject;
import com.pcep.message.objectframe.impl.PCEPNoPathObject;
import com.pcep.message.objectframe.impl.PCEPReportedRouteObject;
import com.pcep.message.objectframe.impl.PCEPRequestParametersObject;
import com.pcep.message.objectframe.impl.PCEPSynchronizationVectorObject;
import com.pcep.request.PCEPRequestFrame;

public class PCEPResponseFrameFactory {

	public static PCEPResponseFrame generatePathComputationRequestFrame(PCEPRequestParametersObject RP) {

		PCEPResponseFrame responseFrame = new PCEPResponseFrame(RP);

		return responseFrame;
	}

	public static PCEPResponseFrame getPathComputationResponseFrame(PCEPMessage message) {

		PCEPRequestParametersObject RP = null;
		PCEPNoPathObject noPath = null;
		PCEPLabelSwitchedPathAttributesObject LSPA = null;
		PCEPBandwidthObject bandwidth = null;
		LinkedList<PCEPMetricObject> metricList = null;
		PCEPIncludeRouteObject IRO = null;
		LinkedList<PCEPExplicitRouteObject> EROList = null;

		LinkedList<PCEPObjectFrame> objectList = message.getObjectsList();

		for (int i = 0; i < objectList.size(); i++) {

			PCEPObjectFrame objectFrame = objectList.get(i);
			PCEPCommonObjectHeader objectFrameHeader = objectFrame.getObjectHeader();

			switch (objectFrameHeader.getClassDecimalValue()) {

			case 2: {
				RP = (PCEPRequestParametersObject) objectFrame;
				break;
			}

			case 3: {
				noPath = (PCEPNoPathObject) objectFrame;
				break;
			}

			case 9: {
				LSPA = (PCEPLabelSwitchedPathAttributesObject) objectFrame;
				break;
			}

			case 5: {
				bandwidth = (PCEPBandwidthObject) objectFrame;
				break;
			}

			case 6: {
				PCEPMetricObject metricObject = (PCEPMetricObject) objectFrame;

				if (metricList != null) {
					metricList.add(metricObject);
				} else {
					metricList = new LinkedList<PCEPMetricObject>();
					metricList.add(metricObject);
				}

				break;
			}

			case 10: {
				IRO = (PCEPIncludeRouteObject) objectFrame;
				break;
			}

			case 7: {
				PCEPExplicitRouteObject ERO = (PCEPExplicitRouteObject) objectFrame;

				if (EROList != null) {
					EROList.add(ERO);
				} else {
					EROList = new LinkedList<PCEPExplicitRouteObject>();
					EROList.add(ERO);
				}

				break;
			}

			default: {
				break;
			}

			}

		}

		PCEPResponseFrame responseFrame = new PCEPResponseFrame(RP);

		if (noPath != null) {
			responseFrame.insertNoPathObject(noPath);
		}
		if (LSPA != null) {
			responseFrame.insertLabelSwitchedPathAttributesObject(LSPA);
		}
		if (bandwidth != null) {
			responseFrame.insertBandwidthObject(bandwidth);
		}
		if (metricList != null) {
			responseFrame.insertMetricObjectList(metricList);
		}
		if (IRO != null) {
			responseFrame.insertIncludeRouteObject(IRO);
		}
		if (EROList != null) {
			responseFrame.insertExplicitRouteObjectList(EROList);
		}

		return responseFrame;
	}

}
