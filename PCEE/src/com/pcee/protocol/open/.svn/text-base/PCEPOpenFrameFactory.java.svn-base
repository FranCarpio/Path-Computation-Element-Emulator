package com.pcep.open;

import java.util.LinkedList;

import com.pcee.common.SessionID;
import com.pcep.message.PCEPCommonMessageHeader;
import com.pcep.message.PCEPConstantValues;
import com.pcep.message.PCEPMessage;
import com.pcep.message.objectframe.PCEPCommonObjectHeader;
import com.pcep.message.objectframe.PCEPObjectFrame;
import com.pcep.message.objectframe.PCEPObjectFrameFactory;
import com.pcep.message.objectframe.impl.PCEPBandwidthObject;
import com.pcep.message.objectframe.impl.PCEPEndPointsObject;
import com.pcep.message.objectframe.impl.PCEPIncludeRouteObject;
import com.pcep.message.objectframe.impl.PCEPLabelSwitchedPathAttributesObject;
import com.pcep.message.objectframe.impl.PCEPLoadBalancingObject;
import com.pcep.message.objectframe.impl.PCEPMetricObject;
import com.pcep.message.objectframe.impl.PCEPOpenObject;
import com.pcep.message.objectframe.impl.PCEPReportedRouteObject;
import com.pcep.message.objectframe.impl.PCEPRequestParametersObject;
import com.pcep.message.objectframe.impl.PCEPSynchronizationVectorObject;

public class PCEPOpenFrameFactory {

	public static PCEPOpenFrame generateOpenFrame(PCEPOpenObject openObject) {

		PCEPOpenFrame openFrame = new PCEPOpenFrame(openObject);

		return openFrame;
	}

	public static PCEPOpenFrame generateOpenFrame(int keepAlive, int deadTimer, String pFlag, String iFlag) {

		PCEPOpenObject openObject = PCEPObjectFrameFactory.generatePCEPOpenObject(pFlag, iFlag, keepAlive, deadTimer);
		PCEPOpenFrame open = new PCEPOpenFrame(openObject);

		return open;
	}

	public static PCEPOpenFrame getOpenFrame(PCEPMessage message) {

		LinkedList<PCEPObjectFrame> objectList = message.getObjectsList();

		if (objectList.size() != 1) {
			localLogger("Wrong OpenMessage Format!");
			return null; // TODO
		}

		PCEPOpenObject openObject = (PCEPOpenObject) objectList.get(0);

		return new PCEPOpenFrame(openObject);

	}

	private static void localLogger(String event) {
		// Logger.logSystemEvents("[PCEPOpenFrameFactory] " + event);
	}

	private static void localDebugger(String event) {
		// Logger.debugger("[PCEPOpenFrameFactory] " + event);
	}

}
