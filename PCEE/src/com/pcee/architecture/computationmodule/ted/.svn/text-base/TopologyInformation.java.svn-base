package com.pcee.ted;

import java.io.File;

import com.graph.graphcontroller.Gcontroller;
import com.graph.graphcontroller.impl.GcontrollerImpl;
import com.graph.topology.importers.ImportTopology;
import com.graph.topology.importers.impl.SNDLibImportTopology;
import com.pcee.logger.Logger;

/**Class to provide Topology Instances to the computation layer 
 * 
 * @author Marek Drogon
 *
 */
public class TopologyInformation {

	//Static oject instance of the TopologyInformation Class
	static private TopologyInformation _instance;

	//Graph Instance 
	private Gcontroller graph;
	
	//Topology Importer used to populate the graph instance
	private ImportTopology topology;

	/**default constructor*/
	private TopologyInformation() {
		topology = new SNDLibImportTopology();
		// topology = new BRITEImportTopology();
		graph = new GcontrollerImpl();

		//Source file used to instantiate the topology 
		File file = new File("atlanta.txt");

		///Function to import the topology stored in the text file into the graph object
		topology.importTopology(graph, file.getAbsolutePath());
		if (graph==null)		
			localDebugger("Error in loading graph from file");
		else
			localLogger("NetworkSize: " + networkSize());
	}

	/**Function to update the graph instance used inside the Topology Information object
	 * 
	 * @param newGraph
	 */
	public synchronized void updateGraph(Gcontroller newGraph) {
		graph = newGraph;
	}

	/**Function to determine the network size*/
	public int networkSize() {
		return graph.getVertexSet().size();
	}

	/**Function to get the instance of the TopologyInformation class*/
	public static TopologyInformation getInstance() {
		if (_instance == null)
			_instance = new TopologyInformation();
		return _instance;
	}

	/**Function to get the graph object used*/
	public Gcontroller getGraph() {
		return graph;
	}

	/**Function to get the topology importer used in the implementation
	 * 
	 * @return
	 */
	public ImportTopology getTopologyImporter() {
		return topology;
	}
	/**Function for logging events 
	 * 
	 * @param event
	 */
	private void localLogger(String event) {
		Logger.logSystemEvents("[TopologyInformation]     " + event);
	}

	/**Function for logging debug information 
	 * 
	 * @param event
	 */
	private void localDebugger(String event) {
		Logger.debugger("[TopologyInformation]     " + event);
	}

	
	
}
